# Functions

# prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3}) {
		${0}
	};
# Function
snippet fun
	function ${1:function_name}(${2}) {
		${0}
	}
# Anonymous Function
snippet f
	function(${1}) {
		${0}
	}
# Function assigned to variable
snippet vf
	var ${1:function_name} = function (${2}) {
		${0}
	}
# jQuery Select DOM
snippet $
	$('${1}')${0}
# jQuery Ready fn
snippet $()
	$(function() {
		${0}
	});
# Immediate function
snippet ()
	;(function(${1}) {
		${0}
	})(${2});
# self-defining function
# if
snippet if
	if (${1}) {
		${0}
	}
# else
snippet el
	else {
		${0}
	}
# else
snippet eli
	else if (${1:true}) {
		${0}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
# case
snippet case
	case '${1:case}':
		${2}
		break;
	${0}
# try
snippet try
	try {
		${1}
	} catch (${2:e}) {
		${0:/* handle error */}
	}
# try finally
snippet tryf
	try {
		${1}
	} catch (${2:e}) {
		${0:/* handle error */}
	} finally {
		${3:/* be executed regardless of the try / catch result*/}
	}
# throw Error
snippet terr
	throw new Error('${1:error message}')
# return
snippet ret
	return ${0:result};

# Loops

# for loop
snippet for
	for (var ${2:i} = 0; $2 < ${1:arr}.length; $2++) {
		var ${3:curr} = $1[$2]${0}
	}
# forin
snippet forin
	for (var ${2:key} in ${1:obj}) {
		if (!$1.hasOwnProperty($2)) continue

		$1[$2]${0:}
	}
# Reversed for loop
snippet forr
	for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2--) {
		var ${3:v} = $1[$2]${0:}
	}
# While loop
snippet wh
	while (${1:/* condition */}) {
		${0}
	}
# Do while loop
snippet do
	do {
		${0}
	} while (${1:/* condition */});
# For in loop
snippet fori
	for (var ${1:prop} in ${2:object}) {
		${0:$2[$1]}
	}

# Objects

# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${0}
	}${3:,}
# hasOwnProperty
snippet has
	hasOwnProperty(${0})
# singleton
# Crockford's object function
snippet obj
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}
# Define multiple properties
snippet props
	var ${1:my_object} = Object.defineProperties(
		${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
				set : function $1_$3_setter(value) {
					// setter code
				},
				value        : ${4:value},
				writeable    : ${5:boolean},
				enumerable   : ${6:boolean},
				configurable : ${0:boolean}
			}
		}
	);
# Define single property
snippet prop
	Object.defineProperty(
		${1:object},
		'${2:property}',
		{
			get : function $1_$2_getter() {
				// getter code
			},
			set : function $1_$2_setter(value) {
				// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${0:boolean}
		}
	);

# Documentation

# docstring
snippet /**
	/**
	 * ${1:description}
	 *
	 * @par${0}
	 * @ret${0}
	 */
snippet @par
	@param {${1:type}} ${2:name} ${0:description}
snippet @ret
	@return {${1:type}} ${0:description}
# JSON

# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr})
# JSON.stringify
snippet jsons
	JSON.stringify(${0:object})

# DOM selectors

# Get elements
snippet get
	getElementsBy${1:TagName}('${0}')
# Get element
snippet gett
	getElementBy${1:Id}('${0}')
# Elements by class
snippet by.
	${1:document}.getElementsByClassName('${0:class}')
# Element by ID
snippet by#
	${1:document}.getElementById('${0:element ID}')
# Query selector
snippet qs
	${1:document}.querySelector('${0:CSS selector}')
# Query selector all
snippet qsa
	${1:document}.querySelectorAll('${0:CSS selector}')

# Debugging
snippet de
	debugger
# console.x
snippet cl
	console.log(${0})
snippet cd
	console.debug(${0})
snippet ce
	console.error(${0})
snippet ct
	console.trace(${0:label})
snippet ctime
	console.time(${0:label})
snippet ca
	console.assert(${1:expression}, ${0:obj})
snippet cdir
	console.dir(${0:obj})

# Misc

# 'use strict';
snippet us
	'use strict'

# setTimeout function
snippet timeout
	setTimeout(function () {${1}}${2}, ${1:10})

# setInterval function
snippet interval
	setInterval(function () {${0}}${2}, ${1:10})

# jdf_ui
snippet jdf_ui
	require('JDF_UI/${1:pager}/1.0.0/$1')${0}
snippet jdf_unit
	require('JDF_UNIT/${1:trimPath}/1.0.0/$1')${0}
snippet debug
	if (/debug=${1:sign}/.test(location.href)) {${0}}
